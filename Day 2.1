Question - House Robber


----------------- DP -----------------

class Solution {
public:
    int solve(int i,vector<int> &nums,vector<int> &dp){
        if(i == 0)
            return nums[i];
        if(i < 0)
            return 0;
        if(dp[i]!=-1)
            return dp[i];
        int pick = nums[i] + solve(i-2,nums,dp);
        int notpick = 0 + solve(i-1,nums,dp);
        
        return dp[i] = max(pick,notpick);
    }
    
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n+1,-1);
        return solve(n-1,nums,dp);
    }
};

----------------- Tabulation -----------------

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,0);
        dp[0] = nums[0];
        int neg = 0;
        for(int i=1;i<n;i++){
            int pick = nums[i];
            if(i>1)
                pick += dp[i-2];
            int notpick = 0 + dp[i-1];
            
            dp[i] = max(pick,notpick);
        }
        return dp[n-1];
    }
};


----------------- Space Optimisation -----------------

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        int prev = nums[0];
        int prev2 = 0;
        for(int i=1;i<n;i++){
            int pick = nums[i];
            if(i>1)
                pick += prev2;
            int notpick = 0 + prev;
            
            int curr = max(pick,notpick);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
};
