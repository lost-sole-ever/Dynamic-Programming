Question - Frog jump with i & i+1

----------------- DP -----------------

int solve(int i,vector<int> &heights,vector<int> &dp){
    if(i == 0)
        return 0;
    if(dp[i]!=-1)
        return dp[i];
    int left = solve(i-1,heights,dp) + abs(heights[i]-heights[i-1]);
    
    int right = INT_MAX;
    if(i>=2)
        right = solve(i-2,heights,dp) + abs(heights[i] - heights[i-2]);
    
    return dp[i] = min(left,right);
    
}

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n+1,-1);
    return solve(n-1,heights,dp);
}


----------------- Tabulation -----------------

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n+1,-1);
    dp[0] = 0;
    for(int i=1;i<n;i++){
        int left = dp[i-1] + abs(heights[i] - heights[i-1]);
        int right = INT_MAX;
        if(i>1){
            right = dp[i-2] + abs(heights[i] - heights[i-2]);
        }
        dp[i] = min(left,right);
    }
    return dp[n-1];
}

----------------- space optimisation -----------------

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    int prev = 0;
    int prev2 = 0;
    for(int i=1;i<n;i++){
        int left = prev + abs(heights[i] - heights[i-1]);
        int right = INT_MAX;
        if(i>1){
            right = prev2 + abs(heights[i] - heights[i-2]);
        }
        int curri = min(left,right);
        prev2 = prev;
        prev = curri;
    }
    return prev;
}
